// <auto-generated />
using System;
using Infrastructure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    [Migration("20250515082943_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("BaseContentId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.AttachmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AttachmentType", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.BaseContent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentText")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("BaseContent", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.BaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseItem", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProductId");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaseContentId");

                    b.HasIndex("BaseItemId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Conversation", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.ConversationMember", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationMember", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("DiscountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.DiscountType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DiscountType", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Infrastructure.Models.Follower", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FollowedAt")
                        .HasColumnType("datetime");

                    b.HasKey("FollowerId", "FollowingId");

                    b.HasIndex("FollowingId");

                    b.ToTable("Follower", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.MediaType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MediaType", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaseContentId");

                    b.HasIndex("ConversationId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Notification", b =>
                {
                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationContenet")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("Id");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.OrderActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BecomeAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("OrderActivity", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedId")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.PaymentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.ProductFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFeatures");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductMedium", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("BaseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("MediaTypeId");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("Infrastructure.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProfilePhoto")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "EmailIndex")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "PhoneNumberIndex")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.Address", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Attachment", b =>
                {
                    b.HasOne("Infrastructure.Models.AttachmentType", "AttachmentType")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Attachment_AttachmentType");

                    b.HasOne("Infrastructure.Models.BaseContent", "BaseContent")
                        .WithMany("Attachments")
                        .HasForeignKey("BaseContentId")
                        .IsRequired()
                        .HasConstraintName("FK_Attachment_BaseContent");

                    b.Navigation("AttachmentType");

                    b.Navigation("BaseContent");
                });

            modelBuilder.Entity("Infrastructure.Models.BaseContent", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "CreateByUser")
                        .WithMany("BaseContents")
                        .HasForeignKey("CreateByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_BaseContent_User");

                    b.HasOne("Infrastructure.Models.BaseContent", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_BaseContent_BaseContent");

                    b.Navigation("CreateByUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Infrastructure.Models.BaseItem", b =>
                {
                    b.HasOne("Infrastructure.Models.Category", "Category")
                        .WithMany("BaseItems")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_BaseItem_Category");

                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("BaseItems")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_BaseItem_User");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Brand", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Brand_Brand");

                    b.HasOne("Infrastructure.Models.Product", "Product")
                        .WithMany("Brands")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Brand_Product");

                    b.Navigation("Parent");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Infrastructure.Models.Cart", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.CartItem", b =>
                {
                    b.HasOne("Infrastructure.Models.BaseItem", "BaseItem")
                        .WithMany("CartItems")
                        .HasForeignKey("BaseItemId")
                        .IsRequired()
                        .HasConstraintName("FK_CartItem_BaseItem");

                    b.HasOne("Infrastructure.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_CartItem_Cart");

                    b.Navigation("BaseItem");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Infrastructure.Models.Category", b =>
                {
                    b.HasOne("Infrastructure.Models.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Category_Category");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Infrastructure.Models.Comment", b =>
                {
                    b.HasOne("Infrastructure.Models.BaseContent", "BaseContent")
                        .WithMany("Comments")
                        .HasForeignKey("BaseContentId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_BaseContent");

                    b.HasOne("Infrastructure.Models.BaseItem", "BaseItem")
                        .WithMany("Comments")
                        .HasForeignKey("BaseItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_BaseItem");

                    b.Navigation("BaseContent");

                    b.Navigation("BaseItem");
                });

            modelBuilder.Entity("Infrastructure.Models.ConversationMember", b =>
                {
                    b.HasOne("Infrastructure.Models.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .IsRequired()
                        .HasConstraintName("FK_ConversationMember_Conversation");

                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ConversationMember_User");

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Coupon", b =>
                {
                    b.HasOne("Infrastructure.Models.BaseItem", "BaseItem")
                        .WithMany("Coupons")
                        .HasForeignKey("BaseItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Coupon_BaseItem");

                    b.HasOne("Infrastructure.Models.DiscountType", "DiscountType")
                        .WithMany("Coupons")
                        .HasForeignKey("DiscountTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Coupon_DiscountType");

                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("Coupons")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Coupon_User");

                    b.Navigation("BaseItem");

                    b.Navigation("DiscountType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Favorite", b =>
                {
                    b.HasOne("Infrastructure.Models.BaseItem", "BaseItem")
                        .WithMany("Favorites")
                        .HasForeignKey("BaseItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Favorites_BaseItem");

                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Favorites_User");

                    b.Navigation("BaseItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Follower", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "FollowerNavigation")
                        .WithMany("FollowerFollowerNavigations")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Follower_User");

                    b.HasOne("Infrastructure.Models.User", "Following")
                        .WithMany("FollowerFollowings")
                        .HasForeignKey("FollowingId")
                        .IsRequired()
                        .HasConstraintName("FK_Follower_User1");

                    b.Navigation("FollowerNavigation");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("Infrastructure.Models.Message", b =>
                {
                    b.HasOne("Infrastructure.Models.BaseContent", "BaseContent")
                        .WithMany("Messages")
                        .HasForeignKey("BaseContentId")
                        .IsRequired()
                        .HasConstraintName("FK_Message_BaseContent");

                    b.HasOne("Infrastructure.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .IsRequired()
                        .HasConstraintName("FK_Message_Conversation");

                    b.Navigation("BaseContent");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Infrastructure.Models.Notification", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "IdNavigation")
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Infrastructure.Models.Order", b =>
                {
                    b.HasOne("Infrastructure.Models.OrderActivity", "OrderActivity")
                        .WithMany("Orders")
                        .HasForeignKey("OrderActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_OrderActivity");

                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("OrderActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderActivity", b =>
                {
                    b.HasOne("Infrastructure.Models.OrderStatus", "OrderStatus")
                        .WithMany("OrderActivities")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderActivity_OrderStatus");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderItem", b =>
                {
                    b.HasOne("Infrastructure.Models.BaseItem", "BaseItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("BaseItemId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_BaseItem");

                    b.HasOne("Infrastructure.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Order");

                    b.Navigation("BaseItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Infrastructure.Models.Payment", b =>
                {
                    b.HasOne("Infrastructure.Models.PaymentMethod", "Method")
                        .WithMany("Payments")
                        .HasForeignKey("MethodId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_PaymentMethod");

                    b.HasOne("Infrastructure.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Order");

                    b.HasOne("Infrastructure.Models.PaymentStatus", "PaymentStatus")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_PaymentStatus");

                    b.Navigation("Method");

                    b.Navigation("Order");

                    b.Navigation("PaymentStatus");
                });

            modelBuilder.Entity("Infrastructure.Models.Product", b =>
                {
                    b.HasOne("Infrastructure.Models.BaseItem", "BaseItem")
                        .WithMany("Products")
                        .HasForeignKey("BaseItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_BaseItem");

                    b.Navigation("BaseItem");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductFeature", b =>
                {
                    b.HasOne("Infrastructure.Models.Product", "Product")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductFeatures_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductMedium", b =>
                {
                    b.HasOne("Infrastructure.Models.BaseItem", "BaseItem")
                        .WithMany("ProductMedia")
                        .HasForeignKey("BaseItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductMedia_BaseItem");

                    b.HasOne("Infrastructure.Models.MediaType", "MediaType")
                        .WithMany("ProductMedia")
                        .HasForeignKey("MediaTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductMedia_MediaType");

                    b.Navigation("BaseItem");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("Infrastructure.Models.Service", b =>
                {
                    b.HasOne("Infrastructure.Models.BaseItem", "BaseItem")
                        .WithMany("Services")
                        .HasForeignKey("BaseItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Service_BaseItem");

                    b.Navigation("BaseItem");
                });

            modelBuilder.Entity("Infrastructure.Models.AttachmentType", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Infrastructure.Models.BaseContent", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("InverseParent");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Infrastructure.Models.BaseItem", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Comments");

                    b.Navigation("Coupons");

                    b.Navigation("Favorites");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductMedia");

                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Infrastructure.Models.Brand", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Infrastructure.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Infrastructure.Models.Category", b =>
                {
                    b.Navigation("BaseItems");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Infrastructure.Models.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Infrastructure.Models.DiscountType", b =>
                {
                    b.Navigation("Coupons");
                });

            modelBuilder.Entity("Infrastructure.Models.MediaType", b =>
                {
                    b.Navigation("ProductMedia");
                });

            modelBuilder.Entity("Infrastructure.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderActivity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderStatus", b =>
                {
                    b.Navigation("OrderActivities");
                });

            modelBuilder.Entity("Infrastructure.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Infrastructure.Models.PaymentStatus", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Infrastructure.Models.Product", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("ProductFeatures");
                });

            modelBuilder.Entity("Infrastructure.Models.User", b =>
                {
                    b.Navigation("BaseContents");

                    b.Navigation("BaseItems");

                    b.Navigation("Carts");

                    b.Navigation("Coupons");

                    b.Navigation("Favorites");

                    b.Navigation("FollowerFollowerNavigations");

                    b.Navigation("FollowerFollowings");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
